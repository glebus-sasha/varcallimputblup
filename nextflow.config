
nextflow.defaults.publishDir.mode = 'copy'
params.outdir          = 'results'

// Configuration for generating pipeline reports if enabled
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Define profiles for different environments
profiles {
    test {
        params.reference       = "https://github.com/glebus-sasha/varcallimputblup/test_data/reference/chr1_region.fa"
        params.faidx           = "https://github.com/glebus-sasha/varcallimputblup/test_data/reference/faidx"
        params.bwaidx          = "https://github.com/glebus-sasha/varcallimputblup/test_data/reference/"
        input_fastqs           = "https://github.com/glebus-sasha/varcallimputblup/test_data/reads"
        params.ref_panel       = "https://github.com/glebus-sasha/varcallimputblup/test_data/ref_panel/chr1_random_10000.vcf.gz"
        params.ref_panel_index = "https://github.com/glebus-sasha/varcallimputblup/test_data/ref_panel/chr1_random_10000.vcf.gz.csi"
        params.outdir          = 'results/test'
        params.reports         = true
        cpus                   = '8'
        memory                 = '10 GB'
    }
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
}

manifest {
    name            = 'glebus-sasha/varcallimputblup'
    author          = """Glebus Aleksandr, Kolpakova Oxana"""
    homePage        = 'https://github.com/glebus-sasha/varcallimputblup'
    description     = """Variant calling, imputation and cattle model construction pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0.0'
    doi             = ''
}